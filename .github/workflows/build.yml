name: Build rk3588-edk2

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - main
#  schedule:
#    - cron: 0 8 * * 5
  watch:
    types: started

env:
  REPO_URL: https://github.com/chainsx/edk2-rk3588
  REPO_BRANCH: master
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential acpica-tools nasm uuid-dev gcc-aarch64-linux-gnu
        sudo timedatectl set-timezone "$TZ"
        export WORKSPACE=/workspace
        sudo mkdir -p /workspace
        cd /workspace
        sudo chown $USER:$GROUPS /workspace
    - name: Clone source code
      working-directory: /workspace
      run: |
        git clone https://github.com/chainsx/edk2-rk3588
        mv edk2-rk3588/* .
    - name: SSH connection to Actions
      uses: csexton/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Compile the firmware
      id: compile
      run: |
        export WORKSPACE=/workspace
        export GCC5_AARCH64_PREFIX=aarch64-linux-gnu-
        export PACKAGES_PATH=$WORKSPACE/edk2:$WORKSPACE/edk2-platforms:$WORKSPACE/edk2-non-osi
        ln -s /workspace/edk2/BaseTools/Conf /workspace/Conf
        cd /workspace
        . edk2/edksetup.sh BaseTools
        make -C edk2/BaseTools
        build -a AARCH64 -t GCC5 -p edk2-platforms/Platform/Rockchip/RK3588/RK3588.dsc
        
        mkdir /workspace/uefi_output
        cp $WORKSPACE/Build/RK3588/DEBUG_GCC5/FV/NOR_FLASH_IMAGE.fd /workspace/uefi_output

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: efi_target
        path: /workspace/uefi_output

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd /workspace/uefi_output
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"
    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: uefi_firmware
        path: ${{ env.FIRMWARE }}
